Note:
	Ubuntu free tier is used for the demonstration in this video.
	There is no security implemented in this video. For example, MongoDB compass is able to connect to AWS EC2 instance without any password. The desired ports of AWS instances are accessible from all the IP addresses, which should not be the case in the any environment. This is done for learning and demonstration purposes only.
	All the IPs and public host names mentioned in this document are used at the time of creation of this video. Please replace these with details of your EC2 instances.

Step 1 : Launch EC2 instances (my youtube video for launching EC2 instance - https://www.youtube.com/watch?v=z2l32IztRbM )
	An instance for config server replica setup 
	An instance for shard server 1 replica setup
	Another instance for shard server 2 replica setup
	An instance for mongos process which will connect our client ( MongoDB compass to our sharded MongoDB cluster)
	

Step 2 : Install MongoDB (on all AWS EC2 Ubuntu instances) ( My youtube video for installing MongoDB on Ubuntu - https://www.youtube.com/watch?v=Ecs_xUrr5YA )
	MongoDB installtion on linux ubuntu https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

	Import the public key used by the package management system.
		wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -

	Create a list file for MongoDB
		echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list

	Reload local package database
		sudo apt-get update
		
	Install the MongoDB packages
		sudo apt-get install -y mongodb-org
		
		Start MongoDB
			sudo systemctl start mongod

		Verify that MongoDB has started successfully.
			sudo systemctl status mongod		

Step 3: 
	Start MongoDB services and configurations ( My other youtube videos on MongoDB sharding - https://www.youtube.com/watch?v=aBaD0qHK1as , https://www.youtube.com/watch?v=Jr0PiGIVJ8k , https://www.youtube.com/watch?v=YU7qjJJpG4M , https://www.youtube.com/watch?v=zGF_7kQBLq4 )
	
	Sharding setup (AWS EC2 instances):
	
	Create required directories for data and configurations:
		
	Config server:
	
		Go to home dir
			cd ~
		
		Run the following command on config server. To create the data direcotries. Ideally all these should be on separate EC2 isntances in different regions.
			mkdir -p shard-demo/configsrv shard-demo/configsrv1 shard-demo/configsrv2
			
		check the mongodb process with the following command on ubuntu or linux
			ps -aef  | grep "mongo"
		
		
		Start mongodb replica set for config server. In case of any questions on config servers and its purpose, please watch my detailed youtube videos mentioned here.
		
			nohup mongod --configsvr  --port 28041 --bind_ip localhost,ec2-54-193-107-112.us-west-1.compute.amazonaws.com --replSet config_repl --dbpath shard-demo/configsrv &
		
			nohup mongod --configsvr  --port 28042 --bind_ip localhost,ec2-54-193-107-112.us-west-1.compute.amazonaws.com --replSet config_repl --dbpath shard-demo/configsrv1 &
		 
			nohup mongod --configsvr  --port 28043 --bind_ip localhost,ec2-54-193-107-112.us-west-1.compute.amazonaws.com --replSet config_repl --dbpath shard-demo/configsrv2 &

--- if not working, use this
sudo rm -r /tmp/mongodb-*.sock
		
		Connect to one of the replica set node (note down the IP address):
			
			mongosh --host 54.193.107.112  --port 28041
		
		Define the replica set config:
		
			rsconf = {
					  _id: "config_repl",
					  configsvr:true,
					  members: [
						{
						 _id: 0,
						 host: "54.193.107.112:28041"
						},
						{
						 _id: 1,
						 host: "54.193.107.112:28042"
						},
						{
						 _id: 2,
						 host: "54.193.107.112:28043"
						}
					   ]
					}
		
		initiate the replica set using the config defined above:			
			rs.initiate(rsconf)

-- IF ALREADY EXISTED --
rs.reconfig(rsconf, {force:true})


		
		check the replica set status:
			rs.status()
					
			
		Shard server 1:
		
		Run the following command on Shard server 1. To create the data direcotries. Ideally all these should be on separate EC2 isntances in different regions.
			mkdir -p shard-demo/shardrep1 shard-demo/shardrep2 shard-demo/shardrep3 
			
		Start mongodb replica set for shard one. In case of any questions on shard servers and its purpose, please watch my detailed youtube videos mentioned here.
		
			nohup mongod --shardsvr --port 28081 --bind_ip localhost,ec2-18-144-138-11.us-west-1.compute.amazonaws.com --replSet shard_repl --dbpath shard-demo/shardrep1 &
		
			nohup mongod --shardsvr --port 28082 --bind_ip localhost,ec2-18-144-138-11.us-west-1.compute.amazonaws.com --replSet shard_repl --dbpath shard-demo/shardrep2 &
			
			nohup mongod --shardsvr --port 28083 --bind_ip localhost,ec2-18-144-138-11.us-west-1.compute.amazonaws.com --replSet shard_repl --dbpath shard-demo/shardrep3 &
			
------- KILL PROCESS ------
sudo lsof -iTCP -sTCP:LISTEN -n -P
sudo kill <mongo_command_pid>

------- check log ------
sudo cat /var/log/mongodb/mongod.log
cat ~/.mongodb/mongosh/<LogID>_log
cat ~/.mongodb/mongosh/65e6ad312d1611b63d99f5b9_log

--- if not working, use this
sudo rm -r /tmp/mongodb-*.sock



		Connect to one of the replica set node (note down the IP address):
			mongosh --host 18.144.138.11  --port 28081
		
		Define the replica set config of shard one:
		
			rsconf = {
				  _id: "shard_repl",
				  members: [
					{
					 _id: 0,
					 host: "18.144.138.11:28081"
					},
					{
					 _id: 1,
					 host: "18.144.138.11:28082"
					},
					{
					 _id: 2,
					 host: "18.144.138.11:28083"
					}
				   ]
				}
		
		initiate the replica set using the config defined above:	
			rs.initiate(rsconf)

-- IF ALREADY EXISTED --
rs.reconfig(rsconf, {force:true})

-- RENAME ---
/* Set `newId` to the new replica set name */
var newId = 'shard_repl'

var doc = db.getSiblingDB("local").system.replset.findOne()
var oldId = doc._id
doc._id = newId
db.getSiblingDB("local").system.replset.insertOne(doc)
db.getSiblingDB("local").system.replset.deleteOne({_id: oldId})

		
		check the replica set status:
			rs.status()
			
			
		Shard server 2:		
						
		Run the following command on Shard server 1. To create the data direcotries. Ideally all these should be on separate EC2 isntances in different regions.
			mkdir -p shard-demo/shard2rep1 shard-demo/shard2rep2 shard-demo/shard2rep3 

		Start mongodb replica set for shard two. In case of any questions on shard servers and its purpose, please watch my detailed youtube videos mentioned here.	
			nohup mongod --shardsvr --port 29081 --bind_ip localhost,ec2-50-18-187-166.us-west-1.compute.amazonaws.com --replSet shard2_repl --dbpath shard-demo/shard2rep1 &
		
			nohup mongod --shardsvr --port 29082 --bind_ip localhost,ec2-50-18-187-166.us-west-1.compute.amazonaws.com --replSet shard2_repl --dbpath shard-demo/shard2rep2 &
			
			nohup mongod --shardsvr --port 29083 --bind_ip localhost,ec2-50-18-187-166.us-west-1.compute.amazonaws.com --replSet shard2_repl --dbpath shard-demo/shard2rep3 &
		
		Connect to one of the replica set node (note down the IP address):
			mongosh --host 50.18.187.166  --port 29081
		
		Define the replica set config of shard one:
			rsconf = {
				  _id: "shard2_repl",
				  members: [
					{
					 _id: 0,
					 host: "50.18.187.166:29081"
					},
					{
					 _id: 1,
					 host: "50.18.187.166:29082"
					},
					{
					 _id: 2,
					 host: "50.18.187.166:29083"
					}
				   ]
				}
		
			rs.initiate(rsconf)
			rs.status()
			

Adjust Priority
cfg = rs.conf()
cfg.members[0].priority = 1
cfg.members[1].priority = 0.5
cfg.members[2].priority = 0.5
rs.reconfig(cfg) 
	or rs.reconfig(cfg, {force:true})


		setup MongoS on another AWS EC2 instance. Refer the following commands.	MongoS can be colocated at the application instance. For this demo purpose, a separate EC2 instance is used.	
		
		The following command is connecting mongos to config server installed on AWS EC2 instance.
			nohup mongos --configdb config_repl/ec2-54-193-107-112.us-west-1.compute.amazonaws.com:28041,ec2-54-193-107-112.us-west-1.compute.amazonaws.com:28042,ec2-54-193-107-112.us-west-1.compute.amazonaws.com:28043 --bind_ip localhost,ec2-13-57-137-224.us-west-1.compute.amazonaws.com &



		Connect to the Sharded Cluster (through MongoS):
			mongosh --host localhost --port 27017
			OR 
			mongosh --host ec2-13-57-137-224.us-west-1.compute.amazonaws.com --port 27017
			
		
		update chunk size - default chunk size is 64 MB, change it to some other value:
			use config
			
			db.settings.updateOne(
			   { _id: "chunksize" },
			   { $set: { _id: "chunksize", value: 2 } },
			   { upsert: true }
			)
			
		Add shard ( all the following commands are to be executed from the mongos instance)
		
			sh.addShard( "shard_repl/18.144.138.11:28081,18.144.138.11:28082,18.144.138.11:28083")
			sh.addShard( "shard2_repl/50.18.187.166:29081,50.18.187.166:29082,50.18.187.166:29083")
			sh.status()
				
			
			sh.enableSharding("netflix_data")
							
			Test with collection 1:
				db.movies.createIndex({ "title" : "hashed" })
				sh.shardCollection("netflix_data.movies", {title: "hashed" })
				sh.status()
				
				sh.balancerCollectionStatus( "netflix_data.movies" )		version 4.4	
				db.movies.getShardDistribution()
			
			Test with collection 2:
				db.credits.createIndex({ "person_id" : "hashed" })
				sh.shardCollection("netflix_data.credits", {person_id: "hashed" } )
				sh.status()

				sh.balancerCollectionStatus( "netflix_data.credits" )	
				db.credits.getShardDistribution()

			Test with collection 3:
				db.user_interactions.createIndex({ "user" : "hashed" })
				sh.shardCollection("netflix_data.user_interactions", {user: "hashed" } )
				sh.status()

				sh.balancerCollectionStatus( "netflix_data.user_interactions" )	
				db.user_interactions.getShardDistribution()			
	
		Command to connect from desktop/laptop mongodb compass to AWS EC2 instance running MongoS
			mongodb://ec2-13-57-137-224.us-west-1.compute.amazonaws.com:27017/admin



changing IP address

# In the mongo shell, switch to the config database
use config

# Find the shard you want to update (you can list all shards with db.shards.find())
db.shards.find({ _id: "shard_repl" })
db.shards.find({ _id: "shard2_repl" })

# Update the shard's host IP address
db.shards.update(
  { _id: "shard_repl" },
  { $set: { host: "shard_repl/18.144.138.11:28081,18.144.138.11:28082,18.144.138.11:28083" } }
)

OR----------

db.shards.update(
  { _id: "shard2_repl" },
  { $set: { host: "shard2_repl/50.18.187.166:29081,50.18.187.166:29082,50.18.187.166:29083" } }
)


--- ADMIN USER ----
db.createUser({
  user: "admin",
  pwd: "password",
  roles: ["userAdminAnyDatabase", "readWriteAnyDatabase", "dbAdminAnyDatabase"]
})